---
layout: single
title: 为开发人员准备的 Cursor 终极介绍（译）
tags: llm 译文
category: llm cursor
excerpt: "让我们面对现实，编程有时候确实很痛苦。我们都经历过——盯着一个空白屏幕，试图记住一个特定的语法，或者调试一个让我们疯狂的错误。"
---

让我们面对现实，编程有时候确实很痛苦。我们都经历过——盯着一个空白屏幕，试图记住一个特定的语法，或者调试一个让我们疯狂的错误。

当然，我们已经看到了像人工智能工具这样的工具[GitHub 副驾驶](https://github.com/features/copilot)，[ChatGPT](https://openai.com/chatgpt/)， 和[克劳德](https://claude.ai/new)尝试让我们的生活变得更轻松。但让我们诚实一点——它们也让我们想要更多。

你知道那些时刻，当你深陷一个复杂的项目中，你希望你的编码助手能看到更大的画面吗？比如，理解你的整体架构，你的编码风格，以及你项目的特定怪癖？

这就是Cursor的用武之地。

**光标人工智能代码编辑器**
---------------

[光标](https://www.cursor.com/)基本上是一个在类固醇上的AI驱动的代码编辑器。它是[Visual Studio Code](https://code.visualstudio.com/)，将先进的人工智能功能带到一个熟悉的界面。

Cursor与众不同之处在于它与编码工作流程的深度集成。它不仅仅是关于建议代码或处理重复性任务。这个工具实际上理解你的项目。它了解你的编码风格，它知道你的项目结构，它甚至能掌握你团队的最佳实践。就像有一个配对编程伙伴在看你的肩膀，提供建议，捕捉错误，甚至帮助你重构代码——所有这些都是实时的。

好的，让我们深入了解使光标如此酷的关键特性，以及它们如何使您的编码体验变得更好。

**1.标签**
--------

忘记你所知道的关于传统自动完成的一切——Cursor的Tab功能就像有一个通灵的编码伙伴就在你的指尖。

一旦启用，Cursor中的Tab功能就会在幕后不断工作，分析您现有的代码并预测您的下一步行动。它不仅仅限于单行补全；Cursor可以建议跨多行的编辑，同时考虑到您最近的更改和您项目的总体上下文。

### **下一代代码生成**

你知道那些时刻，当你在编程时，你会想，“天哪，我希望它能读懂我的思想，为我编写这个函数”吗？好吧，光标的标签功能非常接近。开始输入，它会理解你的意图，并建议下一步的逻辑步骤。这就像与一个真正了解你的人工智能进行配对编程。

### **多行编辑**

这就是事情变得非常酷的地方。光标的标签可以一次建议多个编辑。这不仅仅是节省击键次数——这是关于让你保持在状态。无论你是在添加新代码还是在重构旧代码，光标都支持你。

### **智能改写**

我们都有那些日子，我们的手指跟不上我们的大脑。打字错误发生。语法错误悄悄进入。光标的Tab功能就像您的个人代码校对器，实时捕捉并修复您的错误。这就像有一个拼写检查器，但用于代码。

### **直观光标预测**

是否感觉光标总是出现在错误的地方？Cursor的Tab功能包括一个智能光标预测功能。它几乎能诡异地预测出你接下来想要编辑的地方。

但Tab仅仅是开始。让我们谈谈另一个改变游戏规则的：⌘ K。

**2.⌘ K**
---------

如果Tab是你的编程伙伴，那么⌘ K就是你的编程巫师。这个快捷键将人工智能辅助编程的全部力量置于你的指尖。

### **按需代码生成**

盯着一个空白文件，不知道从哪里开始？⌘ K 已经为你准备好了。只需描述你想要创建的内容，然后看着 Cursor 为你编写代码。从样板代码到复杂的算法，⌘ K 可以帮助你启动编码过程。

### **轻松编辑代码**

还记得上次你需要重构一大块代码的时候吗？那可能涉及很多咖啡，也许还有一些沮丧的嘟囔。有了⌘K，你只需要选择代码，按下快捷键，然后告诉它你想要改变什么。这就像拥有一个精灵，但不是愿望，而是代码编辑。

### **快速问题即时回答**

有时候你只需要一个快速的解释。这就是⌘ K的“快速问题”功能派上用场的地方。选择任何代码，提出一个问题，就能得到即时的、上下文感知的答案。这就像有一个高级开发人员在快速拨号上，没有尴尬的闲聊。

现在，让我们看看Cursor如何将其人工智能智能带到命令行。

**3.终端**
--------

Cursor的AI魔法不仅仅局限于你的代码编辑器。它甚至扩展到了你的终端。不再需要疯狂地搜索命令语法或滚动浏览手册页。

在终端中使用⌘ K，你可以直接用英语输入你想做的事情。光标会将你的请求翻译成正确的命令。这就像是拥有一个真正会说人类的命令行解释器。

例如，而不是试图记住确切的**寻找**命令语法，你只需键入“查找过去24小时内修改的所有文件”，让光标Cursor来完成繁重的工作。

**4.聊天**
--------

虽然cmd K特性改变了你编写代码的方式，但其聊天功能则改变了你对代码的思考方式。

### **语境感知对话**

这不仅仅是另一个侧边栏聊天窗口。光标理解您所在的文件以及光标的位置。这就像是在与一个正在查看您屏幕的开发人员聊天。

有一个你不确定的函数吗？只需问，“这里有bug吗？”你将得到一个基于你的实际代码的答案，而不是一些通用的回应。

### **即时代码应用**

在聊天窗口看到一个你喜欢的建议吗？只需点击一下，它就会出现在你的代码中。无需复制粘贴。聊天和代码编辑器之间的这种无缝集成简化了你的工作流程，使你能够比以往更快地实施解决方案。

### **具有图像支持的视觉上下文**

有时候，代码并不能讲述整个故事。也许你有一个用户界面原型或系统图。使用Cursor的聊天功能，你可以直接将图片拖放到对话中。这就像是在代码审查期间能够在白板上进行素描，不过是数字化的。

**五.作曲家**
---------

现在，这就是事情变得真正有趣的地方。虽然Tab、Chat和⌘K非常适合编写和编辑代码，但Composer将其提升到了一个全新的水平。

### **应用程序生成**

想象一下描述一个应用程序的想法并看着它变成现实。这就是Composer。无论你是在制作原型，构建概念验证，还是甚至创建一个现有应用程序的克隆，Composer都能在几分钟内生成一个功能性的代码库。它不仅仅是编写代码 - 它是创建完整的应用程序，包括所有必要的导入和样板代码。

**提示：**作曲家擅长从描述中生成代码，但有专门的工具可以将设计文件直接转换为代码。[视觉副驾驶](https://www.figma.com/community/plugin/747985167520967365)例如，转换[Figma 设计转化为代码](https://www.builder.io/blog/figma-to-code-ai)这可以特别有用，如果你有自己的设计系统，并且想要简化将设计转化为功能性代码的过程。

### **多文件魔术**

Composer不仅仅可以处理单个文件。它可以在整个项目中协调变更。这就像是拥有一个人工智能建筑师，它不仅理解你的代码，还知道所有部件如何协同工作。一个完美的用例是当你在构建一个应用程序，并且你想要重构代码库以使用一个新的库时。

Composer提供了两种接口选项：

1.  **浮动窗口（CMD+I）**：一个可移动、可调整大小的窗口，让你在处理其他事情时可以方便地使用Composer。非常适合多任务处理。
2.  **全屏模式（CMD+SHIFT+I）**：当你需要关注大局时。你得到三个面板：

这就像是拥有一个高级开发人员，他不仅可以编写代码，还可以理解和实施整个架构。

**六.背景**
--------

Cursor的上下文感知能力使其与其他AI编程工具区别开来。它不仅仅看到你正在工作的文件；它理解你的整个代码库。这种深入的理解为Cursor的许多功能提供了动力，允许更准确和相关的帮助。

### **@符号：您的上下文超级英雄**

光标使用@符号作为在您的AI交互中引用不同类型的上下文的强大方式。无论您是使用⌘ K、聊天还是作曲家，@符号都能让您快速访问文件、代码片段、文档等。

这里是快速回顾：

*   **@文件**：在您的项目中引用整个文件。
*   **@文件夹**：引用整个文件夹。
*   **@代码**：引用代码的具体部分。
*   **@文档**：访问预索引的第三方文档或添加您自己的文档。
*   **@Git**：在提示（聊天）中添加git提交，差异，或拉取请求。
*   **@代码库**：让光标扫描您的整个代码库以获取上下文。
*   **@网**：让光标搜索互联网上的相关资讯。
*   **@聊天**和**@定义**：在⌘ K中，包括聊天信息或附近的代码定义作为上下文。

您甚至可以粘贴带有@前缀的链接，让光标将该网络资源纳入其中。

如果你想要让光标保持焦点，你可以使用一个**.cursorignore**文件（工作像**.gitignore**) 排除特定文件或目录的索引。

**7.人工智能评审**
------------

想象一下，有一个经验丰富的开发者实时审查你的代码更改，捕捉到潜在的错误，防止它们进入生产环境。这正是Cursor的AI Review功能所提供的。

它会扫描您最近的更改，提供见解并捕捉潜在问题。您可以深入到每个审查项目中，查看编辑器中的完整上下文，甚至可以与AI聊天以获取更多详细信息。

您可以自定义AI的搜索内容——想要专注于性能优化还是安全漏洞？只需告诉AI您想要寻找的内容，它就会相应地调整其审查。

你可以选择何时进行审查：

*   检查你的未提交更改
*   将你的工作与主分支进行比较
*   检查你最近的提交

这就像随时进行代码审查，而不必打扰你的队友。这个功能显著提高了代码质量，甚至可以帮助你编写更好的单元测试。

**八.人工智能的规则**
-------------

每个开发者和团队都有自己的编码风格、最佳实践和项目特定要求。Cursor 让您可以将这些偏好直接融入到 AI 的行为中。

在“设置>常规>AI规则”下，您可以添加自定义指令，这些指令将指导Cursor的AI在聊天和⌘K等功能中进行操作。这确保了AI的建议与您首选的编码标准保持一致。

为了获得更多的控制，您可以使用**`.cursorrules`**在项目根目录下创建一个\`.codeclimate.yml\`文件。这允许你定义特定于项目的指令，确保AI理解每个代码库的独特要求。

这就像是训练你自己的个人人工智能助手，按照你喜欢的方式进行编码。

**9.模型**
--------

不同的任务需要不同级别的人工智能计算能力。这就是为什么Cursor提供了一系列的人工智能模型供选择：

*   **GPT-4o**：巨大的大脑。无与伦比的智慧和理解力。
*   **GPT-4**：功能强大，性能和速度平衡良好。
*   **克劳德3.5 十四行诗**：以细致入微的理解和创造性的输出而闻名。
*   **光标-小**：光标自定义模型。不如GPT-4智能，但速度快且无限制。适合快速任务。

对于那些你需要深入研究大型代码库的时候，Cursor提供了设计用来处理长文本的模型。这些模型可以处理高达200k的标记，这意味着你可以在不丢失上下文的情况下分析大量的代码。

**十.隐私和安全**
-----------

Cursor非常重视数据安全。它提供了一种隐私模式，确保您的代码永远不会离开您的机器。这对于处理敏感项目或处理专有代码时非常完美。

**结论**
------

光标正在将人工智能辅助开发提升到一个全新的水平。这不仅仅是关于代码补全或生成代码的问题。这是关于拥有一个真正理解您的项目、您的编码风格以及作为开发人员您的需求的人工智能。它支持多种编程语言，可以帮助新手编码员和高级软件工程师。

随着人工智能不断发展，像Cursor这样的工具向我们展示了一个开发者与人工智能助手之间的界限越来越模糊的未来。这将导致更高效、更具创造性和更强大的软件工程。

Cursor的简单易用掩盖了它强大的功能。只需几行指令，您就可以让它生成复杂的函数，重构整个代码库，甚至创建一个功能性的应用程序。它确实是一个部分开发环境，部分人工智能助手，全部都是游戏规则改变者。

那么为什么不尝试一下Cursor呢？它可能会改变你对编程的看法。谁知道呢？你甚至可能在这个过程中找到一些乐趣。

**光标常见问题解答**
------------

为了帮助你开始使用光标，这里有一些常见的问题：

**Cursor 是否支持所有编程语言？**

差不多。它与Python、JavaScript和Java等常见的编程语言配合得很好，但它将与大多数Visual Studio Code支持的语言一起工作。

**我需要一个OpenAI API密钥来使用光标吗？**

不。光标直接从盒子里出来就可以工作。不需要额外的设置。

**Cursor 能同时处理简单和复杂的编程任务吗？**

绝对！它可以帮助实现简单的功能，但它也可以处理更大的任务，比如重构庞大的代码库或编写整个函数。

**Cursor对初学者好吗？**

当然。如果你刚开始，它的人工智能助手可以帮助解释概念，建议最佳实践，并帮助你边做边学。

**Cursor如何处理现有的代码？**

实际上非常好。它可以理解和处理你已经编写的代码。它可以帮助你操纵代码，重构，甚至解释你的代码库中复杂的部分。

**Cursor能从头开始制作一个完整的应用程序吗？**

这不是魔法——它不能凭空变出一个完整的应用程序。但它可以大大加快速度。有了正确的提示，你可以从一个简单的想法迅速变成一个基本的工作应用程序。

**Cursor 会干扰我现有的工作流程吗？**

Cursor旨在无缝地融入您的开发过程。它建立在VS Code之上，所以如果您习惯了，您会很好的。

**Cursor 可以帮助进行单元测试吗？**

是的，Cursor 可以帮助编写和改进单元测试。它可以建议测试用例，帮助测试设置，甚至识别代码中可能需要更好测试覆盖的区域。

**光标的价格选项是什么？**

Cursor提供了一个免费的Hobby级别，功能有限，一个20美元/月的Pro级别，功能扩展，以及一个40美元/用户/月的Business级别，用于高级功能和团队管理。

**引入视觉副驾驶**：一键将Figma设计转换为高质量代码。

[尝试视觉副驾驶](https://builder.io/signup)

原文链接：[The Ultimate Introduction to Cursor for Developers](https://www.builder.io/blog/cursor-ai-for-developers)

本文使用 [🐝 A `C(Collect) -> T(Transform) -> P(Publish)` automation workflow for content creator.](https://github.com/qddegtya/r) 全自动采集 - 翻译 - 发布
