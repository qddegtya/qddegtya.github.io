<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-04-10T01:58:50+08:00</updated><id>/</id><title>COLORFUL</title><subtitle>有个骚年路过这里</subtitle><author><name>Archer</name><email>qddegtya@gmail.com</email></author><entry><title>KOA源码阅读系列（一） - 理解KOA中间件的执行</title><link href="/blog/2016/04/10/koa-middlewares-explain/" rel="alternate" type="text/html" title="KOA源码阅读系列（一） - 理解KOA中间件的执行" /><published>2016-04-10T00:00:00+08:00</published><updated>2016-04-10T00:00:00+08:00</updated><id>/blog/2016/04/10/koa-middlewares-explain</id><content type="html" xml:base="/blog/2016/04/10/koa-middlewares-explain/">&lt;p&gt;源码阅读系列的开篇就不多废话了，开门见山。&lt;/p&gt;

&lt;p&gt;首先看添加中间件的入口app.use的源码&lt;/p&gt;

&lt;p&gt;```javascript
/**
 * Use the given middleware &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt;.
 *
 * &lt;a href=&quot;https://github.com/param&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/param&quot; class=&quot;user-mention&quot;&gt;@param&lt;/a&gt;&lt;/a&gt; {GeneratorFunction} fn
 * &lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;@return&lt;/a&gt;&lt;/a&gt; {Application} self
 * &lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;@api&lt;/a&gt;&lt;/a&gt; public
 */&lt;/p&gt;

&lt;p&gt;app.use = function(fn){
  if (!this.experimental) {
    // es7 async functions are not allowed,
    // so we have to make sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; is a generator function
    assert(fn &amp;amp;&amp;amp; ‘GeneratorFunction’ == fn.constructor.name, ‘app.use() requires a generator function’);
  }
  debug(‘use %s’, fn._name || fn.name || ‘-‘);&lt;/p&gt;

&lt;p&gt;// 主要就是做这个事情
  // 根据上面的assert，这里的fn均为generator function
  this.middleware.push(fn);
  return this;
};&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;接着，来看一下Server是怎么起来的&lt;/p&gt;

&lt;p&gt;```javascript
/**
 * Shorthand for:
 *
 *    http.createServer(app.callback()).listen(…)
 *
 * &lt;a href=&quot;https://github.com/param&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/param&quot; class=&quot;user-mention&quot;&gt;@param&lt;/a&gt;&lt;/a&gt; {Mixed} …
 * &lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;@return&lt;/a&gt;&lt;/a&gt; {Server}
 * &lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;@api&lt;/a&gt;&lt;/a&gt; public
 */&lt;/p&gt;

&lt;p&gt;app.listen = function(){
  debug(‘listen’);&lt;/p&gt;

&lt;p&gt;// 非常熟悉的createServer
  // 调用的是app.callback
  var server = http.createServer(this.callback());
  return server.listen.apply(server, arguments);
};
```&lt;/p&gt;

&lt;p&gt;很显然，app.callback里应该就有我们想要的中间件执行的部分&lt;/p&gt;

&lt;p&gt;```javascript
/**
 * Return a request handler callback
 * for node’s native http server.
 *
 * &lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;@return&lt;/a&gt;&lt;/a&gt; {Function}
 * &lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;@api&lt;/a&gt;&lt;/a&gt; public
 */&lt;/p&gt;

&lt;p&gt;app.callback = function(){
  if (this.experimental) {
    console.error(‘Experimental ES7 Async Function support is deprecated. Please look into Koa v2 as the middleware signature has changed.’)
  }&lt;/p&gt;

&lt;p&gt;var fn = this.experimental
    ? compose_es7(this.middleware)
    : co.wrap(compose(this.middleware)); // 把中间件串起来
  var self = this;&lt;/p&gt;

&lt;p&gt;if (!this.listeners(‘error’).length) this.on(‘error’, this.onerror);&lt;/p&gt;

&lt;p&gt;return function(req, res){
    res.statusCode = 404;
    var ctx = self.createContext(req, res);
    onFinished(res, ctx.onerror);
    fn.call(ctx).then(function () {
      respond.call(ctx);
    }).catch(ctx.onerror);
  }
};
```&lt;/p&gt;

&lt;p&gt;这里的compose是关键，我们来到koa-compose的源码，仅仅就这38行代码，就构成了KOA中间件执行的核心部分，这里我们暂且不讨论co.wrap&lt;/p&gt;

&lt;p&gt;```javascript
/**
 * Expose compositor.
 */&lt;/p&gt;

&lt;p&gt;module.exports = compose;&lt;/p&gt;

&lt;p&gt;/**
 * Compose &lt;code class=&quot;highlighter-rouge&quot;&gt;middleware&lt;/code&gt; returning
 * a fully valid middleware comprised
 * of all those which are passed.
 *
 * &lt;a href=&quot;https://github.com/param&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/param&quot; class=&quot;user-mention&quot;&gt;@param&lt;/a&gt;&lt;/a&gt; {Array} middleware
 * &lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;@return&lt;/a&gt;&lt;/a&gt; {Function}
 * &lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;@api&lt;/a&gt;&lt;/a&gt; public
 */&lt;/p&gt;

&lt;p&gt;function compose(middleware){
  return function *(next){
    if (!next) next = noop();&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var i = middleware.length;

while (i--) {
  next = middleware[i].call(this, next);
}

return yield *next;   } }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;/**
 * Noop.
 *
 * &lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;@api&lt;/a&gt;&lt;/a&gt; private
 */&lt;/p&gt;

&lt;p&gt;function *noop(){}
```&lt;/p&gt;

&lt;p&gt;这么快就看到这行了？我觉得上面的代码信息量很大，道友们再细细品味一下，确定品味完了，下面的开胃DEMO可以帮助你更好的理解这个执行过程&lt;/p&gt;

&lt;p&gt;```javascript
#!/usr/bin/env node&lt;/p&gt;

&lt;p&gt;// 中间件 a
function* a(next) {
  yield 1;&lt;/p&gt;

&lt;p&gt;// 执行下一个中间件
  yield* next;&lt;/p&gt;

&lt;p&gt;yield ‘继续执行A中间件’;
}&lt;/p&gt;

&lt;p&gt;// 中间件 b
function* b(next) {
  yield 2;
  yield 3;
}&lt;/p&gt;

&lt;p&gt;var next = function* (){};
var i = [a, b].length;&lt;/p&gt;

&lt;p&gt;// 通过next首尾相连
while(i–) {
  next = [a, b][i].call(null, next);
}&lt;/p&gt;

&lt;p&gt;// 包裹第一个middleware
function* start(ne) {
  return yield* ne;
}&lt;/p&gt;

&lt;p&gt;// 输出
console.log(start(next).next());
console.log(start(next).next());
console.log(start(next).next());
console.log(start(next).next());
```&lt;/p&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
➜  a-lab ./a
{ value: 1, done: false }
{ value: 2, done: false }
{ value: 3, done: false }
{ value: &#39;继续执行A中间件&#39;, done: false }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;等等，我们的co去哪儿了？大家有没有发现上面Demo中和我们平时写KOA的不同之处，我们来看一下KOA的官方示例代码：&lt;/p&gt;

&lt;p&gt;```
var koa = require(‘koa’);
var app = koa();&lt;/p&gt;

&lt;p&gt;// x-response-time&lt;/p&gt;

&lt;p&gt;app.use(function *(next){
  var start = new Date;
  yield next;
  var ms = new Date - start;
  this.set(‘X-Response-Time’, ms + ‘ms’);
});&lt;/p&gt;

&lt;p&gt;// logger&lt;/p&gt;

&lt;p&gt;app.use(function *(next){
  var start = new Date;
  yield next;
  var ms = new Date - start;
  console.log(‘%s %s - %s’, this.method, this.url, ms);
});&lt;/p&gt;

&lt;p&gt;// response&lt;/p&gt;

&lt;p&gt;app.use(function *(){
  this.body = ‘Hello World’;
});&lt;/p&gt;

&lt;p&gt;app.listen(3000);
```&lt;/p&gt;

&lt;p&gt;有没有发现？如果还没有发现我就公布答案啦：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;根据上文，我们已经知道，那个负责把所有中间件串起来的next其实本身也是一个generator，但是，如果在Generater函数内部，调用另一个Generator函数，默认情况下是没有效果的，这个时候我们必须使用yield* next&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是，我们写代码的时候明明写的是yield next啊，这就是co的奥秘之处了：&lt;/p&gt;

&lt;p&gt;co做的事情就是帮我们”自动管理”generator的next，并根据调用返回的value做出不同的响应，他的原理其实是自动调用generator的next方法，然后通过toPromise方法，如果遇到一个generator就递归，这就是为什么我们只要写yield next的原因，因为co一旦检测到这个next还是个generater，那就再次co.call(this)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
yield next;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以看一下这个toPromise&lt;/p&gt;

&lt;p&gt;```javascript
/**
 * Convert a &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;ed value into a promise.
 *
 * &lt;a href=&quot;https://github.com/param&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/param&quot; class=&quot;user-mention&quot;&gt;@param&lt;/a&gt;&lt;/a&gt; {Mixed} obj
 * &lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/return&quot; class=&quot;user-mention&quot;&gt;@return&lt;/a&gt;&lt;/a&gt; {Promise}
 * &lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;&lt;a href=&quot;https://github.com/api&quot; class=&quot;user-mention&quot;&gt;@api&lt;/a&gt;&lt;/a&gt; private
 */&lt;/p&gt;

&lt;p&gt;function toPromise(obj) {
  if (!obj) return obj;
  if (isPromise(obj)) return obj;
  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);
  if (‘function’ == typeof obj) return thunkToPromise.call(this, obj);
  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);
  if (isObject(obj)) return objectToPromise.call(this, obj);
  return obj;
}
```&lt;/p&gt;

&lt;p&gt;有了这个函数，如果我们在项目中直接使用了DEMO中的&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
yield 1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;co就会给我们一个错误&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
You may only yield a function, promise, generator, array, or object.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;所以，我们一般在项目中如果想要”同步”写法，都会用Promise封装一下，比如这样：&lt;/p&gt;

&lt;p&gt;```javascript
let getAuthInfo = function(req) {
  return new Promise((resolve, reject) =&amp;gt; {
    rp(req)
    .then((authres) =&amp;gt; {
      debug(&lt;code class=&quot;highlighter-rouge&quot;&gt;用户中心响应结果: ${JSON.stringify(authres)}&lt;/code&gt;);&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  if(authres.status === 0 &amp;amp;&amp;amp; authres.code === 0) {
    resolve(authres);
  } else {
    resolve(null);
  }
})
.catch((err) =&amp;gt; {
  reject(err);
});   }); }; ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，我们就可以愉快地这样使用了：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
let authinfo = yield getAuthInfo(authReq);
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;KOA通过next将中间件”串”了起来，形成了链表，然后通过最外层的generator function触发整个执行过程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在compose的时候，拿取中间件的顺序是FILO的，但是拿出来之后做的操作是循环i–赋值next，因此，依然可以保证正确的顺序执行&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;KOA框架中充斥着各种generater的思想，并且通过co来自动管理generater&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因此在KOA中使用中间件是很愉快的事情，在这个过程中你可以随心所欲做你想做的事情，比如改一个body咋样?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><category term="work" /><category term="javascript" /><category term="node" /><summary>源码阅读系列的开篇就不多废话了，开门见山。

首先看添加中间件的入口app.use的源码

```javascript
/**
 * Use the given middleware fn.
 *
 * @param {GeneratorFunction} fn
 * @return {Application} self
 * @api public
 */

app.use = function(fn){
  if (!this.experimental) {
    // es7 async functions are not allowed,
    // so we have to make sure that fn is a generator function
    assert(fn &amp;amp;&amp;amp; ‘GeneratorFunction’ == fn.constructor.name, ‘app.use() requires a generator function’);
  }
  debug(‘use %s’, fn._name || fn.name || ‘-‘);

// 主要就是做这个事情
  // 根据上面的assert，这里的fn均为generator function
  this.middleware.push(fn);
  return this;
};

```</summary></entry><entry><title>FEDAY2016之旅</title><link href="/blog/2016/03/22/feday2016/" rel="alternate" type="text/html" title="FEDAY2016之旅" /><published>2016-03-22T00:00:00+08:00</published><updated>2016-03-22T00:00:00+08:00</updated><id>/blog/2016/03/22/feday2016</id><content type="html" xml:base="/blog/2016/03/22/feday2016/">&lt;p&gt;&lt;img src=&quot;http://7xqy7v.com1.z0.glb.clouddn.com/colorful/blog/feday2.png&quot; alt=&quot;FEDAY2016&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;前戏&lt;/h3&gt;

&lt;p&gt;2016/3/21 补上参会的完整记录，这个问题从一开始我就是准备“自问自答”的，希望可以通过这种形式把大会的干货分享给更多人。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;出发/到达&lt;/h3&gt;

&lt;p&gt;我跟同事周周是周六凌晨1点才到的广州，住的地方在小区里面，路过楼下的时候看到一家还在营业的啤酒吧，很有Feel，但是此时的精神状态直接把我们送到了房间里，洗完澡之后就碎觉了，准备次日集中精神好好听讲。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section-2&quot;&gt;初到会场&lt;/h3&gt;

&lt;p&gt;次日，我们穿个马路就来到了本次feday大会的现场。然后是标准的签到，拿“大礼包“，参会证等流程，经常参加大会的同学应该很熟悉了，由于我之前参加过d2，觉得阿里报告厅的屏幕已经很震撼了，没想到，第一次在电影院参加技术大会真的有种赶老罗发布会的感觉：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xqy7v.com1.z0.glb.clouddn.com/colorful/blog/feday1.png&quot; alt=&quot;大会现场&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此次的嘉宾阵容：&lt;/p&gt;

&lt;p&gt;好了，进入正题，以下内容既是记录，又是自己的看法和总结，然后形式均为我认为的精华内容整理，完整的内容我觉得没必要赘述，因为大会官网会放出完整的视频。&lt;/p&gt;

&lt;h3 id=&quot;stepan-from-facebook---nodejsreactjs&quot;&gt;Stepan From Facebook - 用Node.js+React.js打造通用应用&lt;/h3&gt;

&lt;p&gt;来参加feday前看到本次大会的主题，当我看到同构话题的时候比较兴奋，因为之前负责的我厂一个全站消息中心改造项目，我和搭档有实践同构并为之落地，而且该项目已经上线，所以还是比较清楚同构的作用以及使用场景，而且在厂内也做了相关分享，所以想看看大会上能不能碰撞出一点不一样的火花。&lt;/p&gt;

&lt;p&gt;Stepan的演讲精华我觉得可以精简整理为如下几点：&lt;/p&gt;

&lt;p&gt;原来用RoR(其实这里泛指后端)做的事情现在都可以用Javascript做，好处是可以前后端复用代码，符合同构的基本条件，然后他通过一个目录结构对比演示指出了同构应用中需要解决的三个事情：渲染/路由/数据（我是这么理解的，因为我认为这确实是同构落地的关键）&lt;/p&gt;

&lt;p&gt;对于渲染，他先列举了一个非常简单的例子，我认为他要表达的意思是：渲染的本质其实就是模版+数据，例如:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
function template(data){ return &#39;&amp;lt;body&amp;gt;${data}&amp;lt;/body&amp;gt;&#39;; }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个函数可以在server端直接将数据扔给res.send，也可以用在client端用来生成真实的dom；但我们的应用往往是复杂的，React(Facebook的工程师肯定是要来安利React的)的renderToString方法可以帮助我们完成Server-Side Rendering，因为React的vdom不需要依赖浏览器侧的环境，这是React支持服务端渲染的唯一一个方法，好多同学已经知道了，讲到这里，作为一名Facebook工程师，他成功地为本次大会率先安利了一把React&lt;/p&gt;

&lt;p&gt;对于路由，他基本上直接安利了React-Router，然后贴出了跟React-Router官方文档几乎一样的代码，所以，折腾过的同学基本可以略过这个环节，但其实很多同学应该知道，路由共享是同构的重要部分，其实这里的坑还是蛮多的，其中还包括React-Router自身的bug，我在项目里的做法是将这块逻辑以中间件的形式进行处理。&lt;/p&gt;

&lt;p&gt;对于数据，不管你有没有用flux，都要解决初始化数据的问题，因为两端共用一份render逻辑，在后端直出的时候，需要将后端得到的数据同步给前端，否则，前端二次render，会得到不正确的渲染输出，这个相信玩过React后端直出的应该也知道，解决方案几乎都是一致的，说到底就是通过:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
window.__STORE__ = {}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;将数据带给前端。你会发现其他封装好的第三方同构库ISO等最终用的都是这个逻辑。&lt;/p&gt;

&lt;p&gt;关于组件拉取数据，他安利了isomorphic-fetch，这样前后端可以共享一份拉取数据的逻辑，对于组件数据在server端的初始化，他的处理方式是，server.js：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
async function fetchAllData(props) {
  return Promise.all(
    props
      .components
      .filter(x =&amp;gt; x.fetchData) // 探测组件是否有fetchData方法
      .(x =&amp;gt; x.fetchData(props))
  );
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里的props可以传入React-Router中match方法返回的上下文，由于我们的业务只直出了部分组件数据，所以这里的做法有所不同，我的做法是将ISO逻辑置入中间件，当中间件匹配到路由后，将利用yield next转交给下一个中间件先拉取数据，然后将数据放入locals中，等到执行到ISO中间件时，中间件将locals中的数据拿出，初始化给React-Router匹配到的组件上下文，最后renderToString
React＋Node.js打造通用应用的折腾过程中其实只要解决这关键的三点，差不多就可以打造出一个同构应用了，但是他还没有提到的还有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;因为前后端共用一份代码，如果client.js中包含require(‘fastclick’)之类的只在浏览器才会依赖的组件引入代码时，我们需要做好环境判断，当然，这非常简单，但是不得不考虑&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果前端项目中的jsx用的是es6 modules，但是server端用的是require，则需要考虑统一&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;同构项目的工程化问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;……&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，我在星巴克逛Stepan博客的时候发现他的博客就是同构的，很有趣，大家可以体验一下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xqy7v.com1.z0.glb.clouddn.com/colorful/blog/stepan1.png&quot; alt=&quot;stepan&#39;s blog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.stepanp.com/&quot;&gt;Stepan’s Blog&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;江剑峰 微信开发过程中的最佳实践&lt;/h3&gt;

&lt;p&gt;剑锋幽默风趣的讲演风格显然非常接地气，这个话题从一开始就吸引住了全场的开发者，因为有太多开发者曾经被微信坑过，这个分享我直奔干货总结了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JS-SDK签名过程中提交的URL参数中不得带”#”及后面部分的内容，会导致签名报错&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异步获取签名的时候，要设置正确的Content-Type&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;清缓存黑科技：//triggerWebViewCacheCleanup&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;flex部分支持&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;微信真的没有动过你的localStorage/Cookie，可能原因是进程被杀等&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;等等，快后退，我要装逼了：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;到3月份底，微信x5将全面升级为blink内核，并全网灰度发放完毕，也就说，我们即将可以大胆写flex了，并再也不担心缓存问题了，动画卡顿问题也会得到改善，大家赶紧验证去吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;react-tips&quot;&gt;黄士旗－ React Tips&lt;/h3&gt;

&lt;p&gt;士旗也是来自Facebook的工程师，讲的也是React，总结下来就是：士旗在教大家如何正确使用React：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;容器组件的存在是为了让它可以专注于数据处理，然后让渲染组件专心负责渲染，只需要管扔进来的是什么数据然后渲染就可以了，这样处理后，我们会发现component的代码将变得非常复杂，当我们要管理的state太多之后，所以就有了flux store，但是flux的实现中有不必要的实现，对于应用来说，一个action，一个state就可以返回一个新的state，这完全就是pure function就可以搞定的事情，于是有了redux store&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将组件拆分，用更好的pure function来返回你需要渲染的这些组件，这样可以利用decorator/HOC来达到组件复用，还可以减少组件中大量的_XXX私有方法，让应用程序变得更加可控，debug变得更容易，其实这块还是能够产生很多共鸣的，相信各厂都在实践一些营销页面快速产出的技术方案，React应该是比较合适的技术选型，可以利用decorator达到组件的高度复用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;善用FP，RxJS。士旗在这里安利了一把learnRX项目（GitHub - ReactiveX/learnrx: A series of interactive exercises for learning Microsoft’s Reactive Extensions Library for Javascript.），FP跟RxJS本质上是两个东西，只是RxJS中有用到FP的思想，编程思维的转变我认为是需要训练和下功夫的，因为习惯思维非常可怕，我有看过RxJS，这种“一切皆Stream”的咒语一开始令人非常困惑，但豁然开朗后简直仿佛像是看到另外一个世界，这方面，士旗主要强调，我们要善用Array的map/reduce/filter，FP可以让代码变的简洁，FP的“语义化“方法名可以帮助提升代码可读性。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;web&quot;&gt;陈子舜－下一代web技术可以运用的点&lt;/h3&gt;

&lt;p&gt;子舜的话题中讲到了很多务实的，腾讯正在实践的一些技术：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;包括离线化，包括对前端性能的不断优化
之前在阿里d2听过腾讯工程师分享过Node.js加速Qzone的一些细节，离线化这块有领略过腾讯对于追求产品极致用户体验的那种态度，我厂也正在慢慢实践，并且落地了一些初步工作，我们意识到无线端的离线化意义重大。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;然后他讲了ServiceWorker，http2，这里可以到时候看大会放出的视频&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;子舜这里还提到了运营商劫持的问题，然后安利了HTTPDNS&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;中间有一次圆桌，HAX主持，主要是一些撕逼，没有啥实质内容，而且我对于有同学问出：［你们怎么看待RN的出现扰乱了原生开发和web开发之间的那种和谐］这种问题感到纳闷。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;winter---&quot;&gt;winter - 如何成为更好的前端&lt;/h3&gt;

&lt;p&gt;第一次见到winter大神本尊，我佩服和尊敬这样的前辈，但是我会保持风度和拒绝浮躁，winter的分享虽然不是技术内容分享，但他分享了他在学习前端过程中的一些他认为的好方法，我觉得现场好多前端工程师应该是可以跟他产生共鸣的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;比如，我们都干过console.dir(window)这种事情吧，然后看到陌生的api，赶紧去学习一下，给自己充充电&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;追求真理的态度，建立自己的知识体系，用权威推翻自己认为的甚至是社区认为的那些权威，比如他提到闭包，通过Google学术找到出处论文（追本溯源），然后推翻自己之前的那些认知&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;他认为要成为专业的前端工程师，20%靠的是知识，另外80%靠的是编码能力，工程能力，架构能力，后者可能需要的就是工作经验，然后不断练习，然后winter感慨，他自己成长最快的那几年都是在学校里，到了工作之后就很少有这样的机会快速成长，即使工作多年，但是发现自己的进步缓慢&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;holger-bartel---http2web&quot;&gt;Holger Bartel - http/2时代的web性能&lt;/h3&gt;

&lt;p&gt;因为之前读过几篇关于http/2的博文，对http/2还是有所了解的，这个话题我没有听完，后来有事情就先走了，听了前面3/4场，这部分大家可以阅读相关博客弥补，我可以安利几篇：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/&quot;&gt;HTTP2.0的奇妙日常&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//aotu.io/notes/2016/03/17/http2-char/%3Fo2src%3Djuejin%26o2layout%3Dcompat&quot;&gt;前端开发与 HTTP/2 的羁绊——安利篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;结束篇&lt;/h3&gt;

&lt;p&gt;说个题外话，QCON貌似也临近了，据我了解，今年qcon对前端话题的范围基本也是限制在下一代web技术，再回过头来看本次的FEDAY，我觉得从嘉宾到议题还是符合时代气息的。希望下次越办越好，很开心的是在回来的前一天晚上，在楼下的那个啤酒吧里遇到了stepan，holger，士旗，裕波等人，跟stepan和holger面对面交流了相关主题，真可谓不虚此行，满足之余，在知乎上，博客上同步以上所有内容给大家，谢谢。&lt;/p&gt;</content><category term="life" /><category term="javascript" /><category term="react" /><category term="node" /><summary>前戏

2016/3/21 补上参会的完整记录，这个问题从一开始我就是准备“自问自答”的，希望可以通过这种形式把大会的干货分享给更多人。

出发/到达

我跟同事周周是周六凌晨1点才到的广州，住的地方在小区里面，路过楼下的时候看到一家还在营业的啤酒吧，很有Feel，但是此时的精神状态直接把我们送到了房间里，洗完澡之后就碎觉了，准备次日集中精神好好听讲。</summary></entry><entry><title>前端工程师的工具包</title><link href="/blog/2016/03/12/mytool/" rel="alternate" type="text/html" title="前端工程师的工具包" /><published>2016-03-12T00:00:00+08:00</published><updated>2016-03-12T00:00:00+08:00</updated><id>/blog/2016/03/12/mytool</id><content type="html" xml:base="/blog/2016/03/12/mytool/">&lt;p&gt;&lt;img src=&quot;http://7xqy7v.com1.z0.glb.clouddn.com/colorful/blog/2016-tool.jpeg&quot; alt=&quot;我是工具控&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前两天看到SegmentFault运营专栏最新的工具控撰写活动，挺有意思的。我觉得整理这样一份自己工作中常用的工具清单还是有好处的，一来是检验自己有没有必先利其器，二来是通过这种分享的方式获得更多的神器推荐。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;工具跟使用者的属性是有必然联系的，本文将从前端开发从业者的角度整理一份我自己的清单，大部分工具的使用平台为OSX&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;我的工具格言&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;具不在多，够用就好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;编辑器及插件&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;推荐理由&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ATOM&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;编辑器本身&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;atom-beautify&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;编辑器代码美化&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;atomic-chrome&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;使用atom编辑页面中的输入框内容&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;atomic-emacs&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;emacs快捷键绑定&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ctrl+x 3分屏的赶脚爽多了&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;autocomplete&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;自动完成&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;必备&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;autoprefixer&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;自动前缀&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;css3必备&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;colorpicker&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;颜色拾取&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在编辑器中使用频率不高&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;codeif&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;命名神器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;听奏写的变量命名服务&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;emmet&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;前端开发神器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;http://docs.emmet.io/cheat-sheet/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;terminal-plus&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;编辑器集成终端&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;打造ide的前奏&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;file-icons&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文件图标显示&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不装逼,很实用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;osx&quot;&gt;OSX工具集&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;推荐理由&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Alfred&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;快启神器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不多说了&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Tmux&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;终端分屏&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;神器属性爆表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;oh-my-zsh&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;zsh增强版&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;神器属性爆表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gitbook Editor&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;写书用&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Spectacle&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;窗口按指定位置摆放&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;微信Web开发者工具&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;微信开发必备&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dash&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;手册仓库&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;神器属性爆表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;AssitorPS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;切图辅助&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;神器属性爆表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Macdown&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Markdown编写&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;体验佳&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;chrome&quot;&gt;Chrome插件&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;推荐理由&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;postman&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;必备神器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Avatars for Github&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Github的动态上显示头像&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;DevTools Author&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在chrome的Sources,console等面板美化代码显示&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Google绘图&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;画UML咯&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Isometric Contributions&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;以3d柱状图显示Github Contributions&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JSON-handle&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;json编辑神器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JSONView&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;json查看神器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Lastpass&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;密码管理&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Momentum&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;壁纸,TODO&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Octotree&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在Github左侧显示项目的Tree&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;阅读和学习开源项目的神器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;OneTab&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不多说了，节省资源神器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;React Developer Tools&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;React开发必备&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Vimium&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;vim快捷键操作浏览器&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;神器属性爆表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;WEB前端助手(FeHelper)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;常用工具箱&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;国产优秀插件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;划词翻译&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;很方便&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;稀土掘金&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;掘金社区Co-Editor必备&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Xmarks&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浏览器收藏夹同步&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;必备良品&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;cli&quot;&gt;CLI增强&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;推荐理由&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;caniuse-cmd&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;caniuse命令行版&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;实用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><category term="tool" /><category term="tool" /><category term="fe" /><summary>前两天看到SegmentFault运营专栏最新的工具控撰写活动，挺有意思的。我觉得整理这样一份自己工作中常用的工具清单还是有好处的，一来是检验自己有没有必先利其器，二来是通过这种分享的方式获得更多的神器推荐。</summary></entry><entry><title>剁手入装备-小鸡手柄G3增强版</title><link href="/blog/2016/02/15/play-xiaoji/" rel="alternate" type="text/html" title="剁手入装备-小鸡手柄G3增强版" /><published>2016-02-15T00:00:00+08:00</published><updated>2016-02-15T00:00:00+08:00</updated><id>/blog/2016/02/15/play-xiaoji</id><content type="html" xml:base="/blog/2016/02/15/play-xiaoji/">&lt;p&gt;春节期间入手了一个休闲神器:小鸡手柄G3增强版。
回味了各种FC，Gameboy，psp等掌机游戏。抱歉的是，我并未录制完整的开箱评测视频。
为了弥补遗憾，顺手分享一下另外一个第三方制作的视频:&lt;/p&gt;

&lt;!-- more --&gt;

&lt;embed src=&quot;http://player.youku.com/player.php/sid/XMTQzOTU2NzQ4MA==/v.swf&quot; allowfullscreen=&quot;true&quot; quality=&quot;high&quot; width=&quot;480&quot; height=&quot;400&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot; /&gt;</content><category term="play" /><category term="play" /><category term="life" /><summary>春节期间入手了一个休闲神器:小鸡手柄G3增强版。
回味了各种FC，Gameboy，psp等掌机游戏。抱歉的是，我并未录制完整的开箱评测视频。
为了弥补遗憾，顺手分享一下另外一个第三方制作的视频:</summary></entry><entry><title>转-常见的Git工作流</title><link href="/blog/2016/02/15/git-recipes/" rel="alternate" type="text/html" title="转-常见的Git工作流" /><published>2016-02-15T00:00:00+08:00</published><updated>2016-02-15T00:00:00+08:00</updated><id>/blog/2016/02/15/git-recipes</id><content type="html" xml:base="/blog/2016/02/15/git-recipes/">&lt;blockquote&gt;
  &lt;p&gt;BY 童仲毅(&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/&quot;&gt;geeeeeeeeek@github&lt;/a&gt;)&lt;/p&gt;

  &lt;p&gt;这是一篇在&lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows&quot;&gt;原文(BY atlassian)&lt;/a&gt;基础上演绎的译文。除非另行注明，页面上所有内容采用知识共享-署名(&lt;a href=&quot;http://creativecommons.org/licenses/by/2.5/au/deed.zh&quot;&gt;CC BY 2.5 AU&lt;/a&gt;)协议共享。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;多种多样的工作流使得在项目中实施Git时变得难以选择。这份教程提供了一个出发点，调查企业团队最常见的Git工作流。&lt;/p&gt;

&lt;p&gt;阅读的时候，请记住工作流应该是一种规范而不是金科玉律。我们希望向你展示所有工作流，让你融会贯通，因地制宜。&lt;/p&gt;

&lt;p&gt;这份教程讨论了下面四种工作流：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#%E4%B8%AD%E5%BF%83%E5%8C%96%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;中心化的工作流&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#feature%E5%88%86%E6%94%AF%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;基于功能分支的工作流&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#gitflow%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;Gitflow工作流&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#fork%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;Fork工作流&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;section&quot;&gt;中心化的工作流&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/01.svg&quot; alt=&quot;Git Workflows: SVN-style Workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;过渡到分布式分版本控制系统看起来是个令人恐惧的任务，但你不必为了利用Git的优点而改变你现有的工作流。你的团队仍然可以用以前SVN的方式开发项目。&lt;/p&gt;

&lt;p&gt;然而，使用Git来驱动你的开发工作流显示出了一些SVN没有的优点。首先，它让每个开发者都有了自己 &lt;em&gt;本地&lt;/em&gt; 的完整项目副本。隔离的环境使得每个开发者的工作独立于项目的其它修改——他们可以在自己的本地仓库中添加提交，完全无视上游的开发，直到需要的时候。&lt;/p&gt;

&lt;p&gt;第二，它让你接触到了Git鲁棒的分支和合并模型。和SVN不同，Git分支被设计为一种故障安全的机制，用来在仓库之间整合代码和共享更改。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;如何工作&lt;/h2&gt;

&lt;p&gt;和Subversion一样，中心化的工作流将中央仓库作为项目中所有修改的唯一入口。和&lt;code class=&quot;highlighter-rouge&quot;&gt;trunk&lt;/code&gt;不同，默认的开发分支叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;，所有更改都被提交到这个分支。这种工作流不需要&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;之外的其它分支。&lt;/p&gt;

&lt;p&gt;开发者将中央仓库克隆到本地后开始工作。在他们的本地项目副本中，他们可以像SVN一样修改文件和提交更改；不过，这些新的提交被保存在 &lt;em&gt;本地&lt;/em&gt; ——它们和中央仓库完全隔离。这使得开发者可以将和上游的同步推迟到他们方便的时候。&lt;/p&gt;

&lt;p&gt;为了向官方项目发布修改，开发者将他们的本地&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支“推送”到中央仓库。这一步等同于&lt;code class=&quot;highlighter-rouge&quot;&gt;svn commit&lt;/code&gt;，除了Git添加的是所有不在中央&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支上的本地提交。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/02.svg&quot; alt=&quot;Central and local repositories&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;管理冲突&lt;/h3&gt;

&lt;p&gt;中央仓库代表官方项目，因此它的提交历史应该被视作神圣不可更改的。如果开发者的本地提交和中央仓库分叉了，Git会拒绝将他们的修改推送上去，因为这会覆盖官方提交。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/03.svg&quot; alt=&quot;Managing Conflicts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在开发者发布他们的功能之前，他们需要fetch更新的中央提交，在它们之上rebase自己的更改。这就像是：“我想要在其他人的工作进展之上添加我的修改。”它会产生完美的线性历史，就像和传统的SVN工作流一样。&lt;/p&gt;

&lt;p&gt;如果本地修改和上游提交冲突时，Git会暂停rebase流程，给你机会手动解决这些冲突。Git很赞的一点是，它将&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/2.4-%E6%A3%80%E6%9F%A5%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%81#git-status&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;&lt;/a&gt;和&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/2.3-%E4%BF%9D%E5%AD%98%E4%BD%A0%E7%9A%84%E6%9B%B4%E6%94%B9#git-add&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;&lt;/a&gt;命令同时用来生成提交和解决合并冲突。这使得开发者能够轻而易举地管理他们的合并。另外，如果他们改错了什么，Git让他们轻易地退出rebase过程，然后重试（或者找人帮忙）。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;栗子&lt;/h2&gt;

&lt;p&gt;让我们一步步观察一个普通的小团队是如何使用这种工作流协作的。我们有两位开发者，John和Mary，分别在开发两个功能，他们通过中心化的仓库共享代码。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;一人初始化了中央仓库&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/04.svg&quot; alt=&quot;Git Workflows: Initialize Central Bare Repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先，需要有人在服务器上创建中央仓库。如果这是一个新项目，你可以初始化一个空的仓库。不然，你需要导入一个已经存在的Git或SVN项目。&lt;/p&gt;

&lt;p&gt;中央仓库应该永远是裸仓库（没有工作目录），可以这样创建：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
ssh user@host git init --bare /path/to/repo.git
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但确保你使用的SSH用户名&lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;、服务器&lt;code class=&quot;highlighter-rouge&quot;&gt;host&lt;/code&gt;的域名或IP地址、储存仓库的地址&lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/repo.git&lt;/code&gt;是有效的。注意&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;约定俗成地出现在仓库名的后面，表明这是一个裸仓库。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;所有人将仓库克隆到本地&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/05.svg&quot; alt=&quot;Git Workflows: Clone Central Repo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来，每个开发者在本地创建一份完整项目的副本。使用&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/2.2-%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93#git-clone&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;&lt;/a&gt;命令：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git clone ssh://user@host/path/to/repo.git
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当你克隆仓库时，Git自动添加了一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;的远程连接，指向“父”仓库，以便你以后和这个仓库交换数据。&lt;/p&gt;

&lt;h3 id=&quot;john&quot;&gt;John在开发他的功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/06.svg&quot; alt=&quot;Git Workflows: Edit Stage Commit Feature Process &quot; /&gt;&lt;/p&gt;

&lt;p&gt;在他的本地仓库中，John可以用标准的Git提交流程开发功能：编辑、缓存、提交。如果你对缓存区还不熟悉，你也可以不用记录工作目录中每次的变化。于是你创建了一个高度集中的提交，即使你已经在本地做了很多修改。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git status # 查看仓库状态
git add &amp;lt;some-file&amp;gt; # 缓存一个文件
git commit # 提交一个文件&amp;lt;/some-file&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;记住，这些命令创建的是本地提交，John可以周而复始地重复这个过程，而不用考虑中央仓库。对于庞大的功能，需要切成更简单、原子化的片段时，这个特性就很有用。&lt;/p&gt;

&lt;h3 id=&quot;mary&quot;&gt;Mary在开发她的功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/07.svg&quot; alt=&quot;Git Workflows: Edit Stage Commit Feature&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同时，Mary在她自己的本地仓库用相同的编辑/缓存/提交流程开发她的功能。和John一样，她不需要关心中央仓库的进展，她也 &lt;em&gt;完全&lt;/em&gt; 不关心John在他自己仓库中做的事，因为所有本地仓库都是私有的。&lt;/p&gt;

&lt;h3 id=&quot;john-1&quot;&gt;John发布了他的功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/08.svg&quot; alt=&quot;Git Workflows: Publish Feature&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一旦John完成了他的功能，他应该将本地提交发布到中央仓库，这样其他项目成员就可以访问了。他可以使用&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.2-%E4%BF%9D%E6%8C%81%E5%90%8C%E6%AD%A5#git-push&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/a&gt;命令，就像：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push origin master
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;记住，&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;是John克隆中央仓库时指向它的远程连接。&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;参数告诉Git试着将&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支变得和他本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支一样。中央仓库在John克隆之后还没有进展，因此这个推送如他所愿，没有产生冲突。&lt;/p&gt;

&lt;h3 id=&quot;mary-1&quot;&gt;Mary试图发布她的功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/09.svg&quot; alt=&quot;Git Workflows: Push Command Error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;John已经成功地将他的更改发布到了中央仓库上，看看当Mary试着将她的功能推送到上面时会发生什么。她可以使用同一个推送命令：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push origin master
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是，她的本地历史和中央仓库已经分叉了，Git会拒绝这个请求，并显示一段冗长的错误信息：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
error: failed to push some refs to &#39;/path/to/repo.git&#39;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. &#39;git pull&#39;)
hint: before pushing again.
hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git防止Mary覆盖官方的修改。她需要将John的更新拉取到她的仓库，和她的本地修改整合后，然后重试。&lt;/p&gt;

&lt;h3 id=&quot;maryjohnrebase&quot;&gt;Mary在John的提交之上rebase&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/10.svg&quot; alt=&quot;Git Workflows: Git Pull Rebase&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mary可以使用&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.2-%E4%BF%9D%E6%8C%81%E5%90%8C%E6%AD%A5#git-pull&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;&lt;/a&gt;来将上游修改并入她的仓库。这个命令和&lt;code class=&quot;highlighter-rouge&quot;&gt;svn update&lt;/code&gt;很像——它拉取整个上游提交历史到Mary的本地仓库，并和她的本地提交一起整合：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git pull --rebase origin master
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--rebase&lt;/code&gt;选项告诉Git，在同步了中央仓库的修改之后，将Mary所有的提交移到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支的顶端，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/11.svg&quot; alt=&quot;Rebasing to Master&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你忽略这个选项拉取同样会成功，只不过你每次和中央仓库同步时都会多出一个“合并提交”。在这种工作流中，rebase和生成一个合并提交相比，总是一个更好的选择。&lt;/p&gt;

&lt;h3 id=&quot;mary-2&quot;&gt;Mary解决了合并冲突&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/12.svg&quot; alt=&quot;Git Workflows: Rebasing on Commits&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rebase的工作是将每个本地提交一个个转移到更新后的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支。也就是说，你可以一个个提交分别解决合并冲突，而不是在一个庞大的合并提交中解决。它会让你的每个提交保持专注，并获得一个干净的项目历史。另一方面，你更容易发现bug是在哪引入的，如果有必要的话，用最小的代价回滚这些修改。&lt;/p&gt;

&lt;p&gt;如果Mary和John开发的功能没有关联，rebase的过程不太可能出现冲突。但如果出现冲突时，Git在当前提交会暂停rebase，输出下面的信息，和一些相关的指令：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
CONFLICT (content): Merge conflict in &amp;lt;some-file&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/13.svg&quot; alt=&quot;Conflict Resolution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git的优点在于 &lt;em&gt;每个人&lt;/em&gt; 都能解决他们自己的合并冲突。在这个例子中，Mary只需运行一下&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/2.4-%E6%A3%80%E6%9F%A5%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%81#git-status&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;&lt;/a&gt;就可以发现问题是什么。冲突的文件会出现在未合并路径中：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
# Unmerged paths:
# (use &quot;git reset HEAD &amp;lt;some-file&amp;gt;...&quot; to unstage)
# (use &quot;git add/rm &amp;lt;some-file&amp;gt;...&quot; as appropriate to mark resolution)
#
# both modified: &amp;lt;some-file&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接下来，修改这些文件。如果她对结果满意了，和往常一样缓存这些文件，然后让&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/2.7-%E9%87%8D%E5%86%99%E9%A1%B9%E7%9B%AE%E5%8E%86%E5%8F%B2#git-rebase&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;&lt;/a&gt;完成接下来的工作：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git add &amp;lt;some-file&amp;gt;
git rebase --continue
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;就是这样。Git会继续检查下个提交，对冲突的提交重复这个流程。&lt;/p&gt;

&lt;p&gt;如果你这时候发现不知道自己做了什么，不要惊慌。只要运行下面的命令，你就会回到开始之前的状态：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git rebase --abort
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;mary-3&quot;&gt;Mary成功发布了她的分支&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/14.svg&quot; alt=&quot;Git Workflows: Synchronize Central Repo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在她和中央仓库同步之后，Mary可以成功地发布她的修改：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push origin master
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;接下来该怎么做&lt;/h2&gt;

&lt;p&gt;正如你所见，使用一丢丢Git命令来复制一套传统的Subversion开发环境也是可行的。这对于从SVN转变而来的团队来说很棒，但这样没有利用到Git分布式的本质。&lt;/p&gt;

&lt;p&gt;如果你的团队已经习惯了中心化的工作流，但希望提高协作效率，那么探索&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#feature%E5%88%86%E6%94%AF%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;Feature分支工作流&lt;/a&gt;的好处是完全值当的。每个功能在专门的独立分支上进行，在代码并入官方项目之前就可以启动围绕新修改的深度讨论。&lt;/p&gt;

&lt;h2 id=&quot;feature&quot;&gt;Feature分支的工作流&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/feature-branch-workflow/01.svg&quot; alt=&quot;Feature Branch Workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一旦你掌握了&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#%E4%B8%AD%E5%BF%83%E5%8C%96%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;中心化工作流&lt;/a&gt;的使用姿势，在你的开发流程中添加功能分支是一个简单的方式，来促进协作和开发者之间的交流。这种封装使得多个开发者专注自己的功能而不会打扰主代码库。它还保证&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支永远不会包含损坏的代码，给持续集成环境带来了是很大的好处。&lt;/p&gt;

&lt;p&gt;封装功能的开发使得&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.3-%E5%88%9B%E5%BB%BAPull-Request&quot;&gt;pull request&lt;/a&gt;的使用成为可能，用来启动围绕一个分支的讨论。它给了其他开发者在功能并入主项目之前参与决策的机会。或者，如果你开发功能时卡在一半，你可以发起一个pull request，向同事寻求建议。重点是，pull request使得你的团队在评论其他人的工作时变得非常简单。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;如何工作&lt;/h2&gt;

&lt;p&gt;Feature分支工作流同样使用中央仓库，&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;同样代表官方的项目历史。但是，与其直接提交在本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支，开发者每次进行新的工作时创建一个新的分支。Feature分支应该包含描述性的名称，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;animated-menu-items&lt;/code&gt;(菜单项动画)或&lt;code class=&quot;highlighter-rouge&quot;&gt;issue-#1061&lt;/code&gt;。每个分支都应该有一个清晰、高度集中的目的。&lt;/p&gt;

&lt;p&gt;Git在技术上无法区别&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;和功能分支，所以开发者可以在feature分支上编辑、缓存、提交，就和中心化工作流中一样。&lt;/p&gt;

&lt;p&gt;此外，feature分支可以（也应该）被推送到中央仓库。这使得你和其他开发者共享这个功能，而又不改变官方代码。既然&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;只是一个“特殊”的分支，在中央仓库中储存多个feature分支不会引出什么问题。当然了，这也是备份每个开发者本地提交的好办法。&lt;/p&gt;

&lt;h3 id=&quot;pull-request&quot;&gt;Pull Request&lt;/h3&gt;

&lt;p&gt;除了隔离功能开发之外，分支使得通过&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.3-%E5%88%9B%E5%BB%BAPull-Request&quot;&gt;pull request&lt;/a&gt;讨论修改成为可能。一旦有人完成了一个功能，他们不会立即将它并入&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;。他们将feature分支推送到中央服务器上，发布一个pull request，请求将他们的修改并入&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;。这给了其他开发者在修改并入主代码库之前审查的机会。&lt;/p&gt;

&lt;p&gt;代码审查是pull request的主要好处，但他们事实上被设计为成为讨论代码的一般场所。你可以把pull request看作是专注某个分支的讨论版。也就是说他们可以用于开发流程之前。比如，一个开发者在某个功能上需要帮助，他只需发起一个pull request。感兴趣的小伙伴会自动收到通知，看到相关提交中的问题。&lt;/p&gt;

&lt;p&gt;一旦pull request被接受了，发布功能的行为和中心化的工作流是一样的。首先，确定你本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;和上游的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;已经同步。然后，将feature分支并入&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;，将更新的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;推送回中央仓库。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;栗子&lt;/h2&gt;

&lt;p&gt;下面这个🌰演示了代码审查使用到的pull request，但记住pull request有多种用途。&lt;/p&gt;

&lt;h3 id=&quot;mary-4&quot;&gt;Mary开始了一个新功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/feature-branch-workflow/02.svg&quot; alt=&quot;New Feature Branch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在她开始开发一个功能之前，Mary需要一个独立的分支。她可以用下面的命令&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF#git-checkout&quot;&gt;创建新分支&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout -b marys-feature master
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一个基于&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;、名为&lt;code class=&quot;highlighter-rouge&quot;&gt;marys-feature&lt;/code&gt;的分支将会被checkout，&lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt;标记告诉Git在分支不存在时创建它。在这个分支上，Mary和往常一样编辑、缓存、提交更改，用足够多的提交来构建这个功能：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git status
git add &amp;lt;some-file&amp;gt;
git commit
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;mary-5&quot;&gt;Mary去吃饭了&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/feature-branch-workflow/03.svg&quot; alt=&quot;Git Workflows: Feature Commits&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mary在早上&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/2.3-%E4%BF%9D%E5%AD%98%E4%BD%A0%E7%9A%84%E6%9B%B4%E6%94%B9#git-commit&quot;&gt;给她的功能添加了一些提交&lt;/a&gt;。在她去吃午饭前，&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.2-%E4%BF%9D%E6%8C%81%E5%90%8C%E6%AD%A5#git-push&quot;&gt;将她的分支推送到中央仓库&lt;/a&gt;是个不错的想法。这是一种方便的备份，但如果Mary和其他开发者一起协作，他们也可以看到她的初始提交了。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push -u origin marys-feature
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个命令将&lt;code class=&quot;highlighter-rouge&quot;&gt;marys-feature&lt;/code&gt;推送到中央仓库(&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;)，&lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt;标记将它添加为远程跟踪的分支。在设置完跟踪的分支之后，Mary调用不带任何参数的&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;来推送她的功能。&lt;/p&gt;

&lt;h3 id=&quot;mary-6&quot;&gt;Mary完成了她的工作&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/feature-branch-workflow/04.svg&quot; alt=&quot;Git Workflows: Pull Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当Mary吃完午饭回来，她完成了她的功能。在&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF#git-merge&quot;&gt;并入&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/a&gt;之前，她需要发布一个pull request，让其他的团队成员知道她所做的工作。但首先，她应该保证中央仓库包含了她最新的提交：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后，她在她的Git界面上发起了一个pull request，请求将&lt;code class=&quot;highlighter-rouge&quot;&gt;marys-feature&lt;/code&gt;合并进&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;，团队成员会收到自动的通知。Pull request的好处是，评论显示在相关的提交正下方，方便讨论特定的修改。&lt;/p&gt;

&lt;h3 id=&quot;billpull-request&quot;&gt;Bill收到了pull request&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/feature-branch-workflow/05.svg&quot; alt=&quot;Git Workflows: Feature Pull Requests&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bill收到了pull request，并且查看了&lt;code class=&quot;highlighter-rouge&quot;&gt;marys-feature&lt;/code&gt;。他决定在并入官方项目之前做一些小修改，通过pull request和Mary进行了沟通。&lt;/p&gt;

&lt;h3 id=&quot;mary-7&quot;&gt;Mary作了修改&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/feature-branch-workflow/06.svg&quot; alt=&quot;Git Workflows: Central Repository Push&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了做这些更改，Mary重复了之前创建功能时相同的流程，她编辑、缓存、提交、将更新推送到中央仓库。她所有的活动显示在pull request中，Bill可以一直评论。&lt;/p&gt;

&lt;p&gt;如果Bill想要的话，也可以将&lt;code class=&quot;highlighter-rouge&quot;&gt;marys-feature&lt;/code&gt;pull到他自己的本地仓库，继续工作。后续的任何提交都会显示在pull request上。&lt;/p&gt;

&lt;h3 id=&quot;mary-8&quot;&gt;Mary发布了她的功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/feature-branch-workflow/07.svg&quot; alt=&quot;Merging a Feature Branch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一旦Bill准备接受这个pull request，某个人（Bill或者Mary都可）需要将功能并入稳定的项目：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout master
git pull
git pull origin marys-feature
git push
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先，不管是谁在执行合并，都要保证他们的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支是最新的。然后，运行&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull origin marys-feature&lt;/code&gt;合并中央仓库的&lt;code class=&quot;highlighter-rouge&quot;&gt;marys-feature&lt;/code&gt;副本。你也可以使用简单的&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge marys-feature&lt;/code&gt;，但之前的命令保证你拉取下来的一定是功能分支最新的版本。最后，更新的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;需要被推送回&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这个过程导致了一个合并提交。一些开发者喜欢它，因为它是功能和其余代码合并的标志。但，如果你希望得到线性的历史，你可以在执行merge之前将功能rebase到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支的顶端，产生一个快速向前的合并。&lt;/p&gt;

&lt;p&gt;一些界面会自动化接受pull request的流程，只需点击一下“Merge Pull Request”。如果你的没有的话，它至少在合并之后应该可以自动地关闭pull request。&lt;/p&gt;

&lt;h3 id=&quot;john-2&quot;&gt;同时，John以同样的方式工作着&lt;/h3&gt;

&lt;p&gt;Mary和Bill一起开发&lt;code class=&quot;highlighter-rouge&quot;&gt;marys-feature&lt;/code&gt;，在pull request上讨论的同时，John还在开发他自己的feature分支。通过将功能用不同分支隔离开来，每个人可以独立地工作，但很容易和其他开发者共享修改。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;接下来该怎么做&lt;/h2&gt;

&lt;p&gt;为了彻底了解Github上的功能分支，你应该查看&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF&quot;&gt;使用分支一章&lt;/a&gt;。现在，你应该已经看到了功能分支极大地增强了&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#%E4%B8%AD%E5%BF%83%E5%8C%96%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;中心化工作流&lt;/a&gt;中单一&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支的作用。除此之外，功能分支还便利了pull request的使用，在版本控制界面上直接讨论特定的提交。Gitflow工作流是管理功能开发、发布准备、维护的常见模式。&lt;/p&gt;

&lt;h2 id=&quot;gitflow&quot;&gt;Gitflow工作流&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/01.svg&quot; alt=&quot;Gitflow Workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面的&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;Gitflow工作流&lt;/a&gt;一节源于&lt;a href=&quot;http://nvie.com/&quot;&gt;nvie&lt;/a&gt;网站上的作者Vincent Driessen。&lt;/p&gt;

&lt;p&gt;Gitflow工作流围绕项目发布定义了一个严格的分支模型。有些地方比&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#feature%E5%88%86%E6%94%AF%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;功能分支工作流&lt;/a&gt;更复杂，为管理大型项目提供了鲁棒的框架。&lt;/p&gt;

&lt;p&gt;和功能分支工作流相比，这种工作流没有增加任何新的概念或命令。它给不同的分支指定了特定的角色，定义它们应该如何、什么时候交流。除了功能分支之外，它还为准备发布、维护发布、记录发布分别使用了单独的分支。当然，你还能享受到功能分支工作流带来的所有好处：pull request、隔离实验和更高效的协作。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;如何工作&lt;/h2&gt;

&lt;p&gt;Gitflow工作流仍然使用中央仓库作为开发者沟通的中心。和&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83&quot;&gt;其他工作流&lt;/a&gt;一样，开发者在本地工作，将分支推送到中央仓库。唯一的区别在于项目的分支结构。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;历史分支&lt;/h3&gt;

&lt;p&gt;和单独的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支不同，这种工作流使用两个分支来记录项目历史。&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支储存官方发布历史，&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支用来整合功能分支。同时，这还方便了在&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支上给所有提交打上版本号标签。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/02.svg&quot; alt=&quot;Historical Branches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;工作流剩下的部分围绕这两个分支的差别展开。&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;功能分支&lt;/h3&gt;

&lt;p&gt;每个新功能都放置在自己的分支中，可以&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.2-%E4%BF%9D%E6%8C%81%E5%90%8C%E6%AD%A5#git-push&quot;&gt;在备份/协作时推送到中央仓库&lt;/a&gt;。但是，与其合并到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;，功能分支将开发分支作为父分支。当一个功能完成时，它将被&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF#git-merge&quot;&gt;合并回&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;&lt;/a&gt;。功能永远不应该直接在&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;上交互。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/03.svg&quot; alt=&quot;Feature Branches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意，功能分支加上&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支就是我们之前所说的功能分支工作流。但是，Gitflow工作流不止于此。&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;发布分支&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/04.svg&quot; alt=&quot;Release Branches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一旦&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支的新功能足够发布（或者预先确定的发布日期即将到来），你可以从&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支fork一个发布分支。这个分支的创建开始了下个发布周期，只有和发布相关的任务应该在这个分支进行，如修复bug、生成文档等。一旦准备好了发布，发布分支将合并进&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;，打上版本号的标签。另外，它也应该合并回&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;，后者可能在发布启动之后有了新的进展。&lt;/p&gt;

&lt;p&gt;使用一个专门的分支来准备发布确保一个团队完善当前的发布，其他团队可以继续开发下一个发布的功能。它还建立了清晰的开发阶段（比如说，“这周我们准备4.0版本的发布”，而我们在仓库的结构中也能看到这个阶段）。&lt;/p&gt;

&lt;p&gt;通常我们约定：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;创建分支&lt;/li&gt;
  &lt;li&gt;合并进&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支&lt;/li&gt;
  &lt;li&gt;命名规范&lt;code class=&quot;highlighter-rouge&quot;&gt;release-* or release/*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-14&quot;&gt;维护分支&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/05.svg&quot; alt=&quot;Maintenance Branches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;维护或者“紧急修复”分支用来快速给产品的发布打上补丁。这是唯一可以从&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;上fork的分支。一旦修复完成了，它应该被并入&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支（或者当前的发布分支），&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;应该打上更新的版本号的标签。&lt;/p&gt;

&lt;p&gt;有一个专门的bug修复开发线使得你的团队能够处理issues，而不打断其他工作流或是要等到下一个发布周期。你可以将维护分支看作在&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支上工作的临时发布分支。&lt;/p&gt;

&lt;h2 id=&quot;section-15&quot;&gt;栗子&lt;/h2&gt;

&lt;p&gt;下面的栗子演示了这种工作流如何用来管理发布周期。假设你已经创建了中央仓库。&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;创建一个开发分支&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/06.svg&quot; alt=&quot;Create a Develop Branch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你要做的第一步是为默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支创建一个互补的&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支。最简单的办法是&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF#git-branch&quot;&gt;在本地创建一个空的&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支&lt;/a&gt;，将它推送到服务器上：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git branch develop
git push -u origin develop
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个分支将会包含项目中所有的历史，而&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;将包含不完全的版本。其他开发者应该&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/2.2-%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93#git-clone&quot;&gt;将中央仓库克隆到本地&lt;/a&gt;，创建一个分支来追踪develop分支：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git clone ssh://user@host/path/to/repo.git
git checkout -b develop origin/develop
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;现在所有人都有了一份历史分支的本地副本。&lt;/p&gt;

&lt;h3 id=&quot;maryjohn&quot;&gt;Mary和John开始了新功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/07.svg&quot; alt=&quot;New Feature Branches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们的栗子从John和Mary在不同分支上工作开始。他们都要为自己的功能创建单独的分支。&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF#git-checkout&quot;&gt;他们的功能分支都应该基于&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;&lt;/a&gt;，而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout -b some-feature develop
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;他们都使用“编辑、缓存、提交”的一般约定来向功能分支添加提交：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git status
git add &amp;lt;some-file&amp;gt;
git commit
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;mary-9&quot;&gt;Mary完成了她的功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/08.svg&quot; alt=&quot;Merging a Feature Branch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在添加了一些提交之后，Mary确信她的功能以及准备好了。如果她的团队使用pull request，现在正是发起pull request的好时候，请求将她的功能并入&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支。否则，她可以向下面一样，将它并入本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支，推送到中央仓库：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git pull origin develop
git checkout develop
git merge some-feature
git push
git branch -d some-feature
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;第一个命令在尝试并入功能分支之前确保&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支已是最新。注意，功能绝不该被直接并入&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;。冲突的处理方式和&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#%E4%B8%AD%E5%BF%83%E5%8C%96%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;中心化工作流&lt;/a&gt;相同。&lt;/p&gt;

&lt;h3 id=&quot;mary-10&quot;&gt;Mary开始准备发布&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/09.svg&quot; alt=&quot;Preparing a Release&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当John仍然在他的功能分支上工作时，Mary开始准备项目的第一个官方发布。和开发功能一样，她新建了一个分支来封装发布的准备工作。这也正是发布的版本号创建的一步：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout -b release-0.1 develop
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个分支用来整理提交，充分测试，更新文档，为即将到来的发布做各种准备。它就像是一个专门用来完善发布的功能分支。&lt;/p&gt;

&lt;p&gt;一旦Mary创建了这个分支，推送到中央仓库，这次发布的功能便被锁定了。不在&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;分支中的功能将被推迟到下个发布周期。&lt;/p&gt;

&lt;h3 id=&quot;mary-11&quot;&gt;Mary完成了她的发布&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/10.svg&quot; alt=&quot;Merging Release into Master&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一旦发布准备稳妥，Mary将它并入&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;，然后删除发布分支。合并回&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;很重要，因为可能已经有关键的更新添加到了发布分支上，而开发新功能需要用到它们。同样的，如果Mary的团队重视代码审查，现在将是发起pull request的完美时机。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout master
git merge release-0.1
git push
git checkout develop
git merge release-0.1
git push
git branch -d release-0.1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;发布分支是功能开发(&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;)和公开发布(master)之间的过渡阶段。不论什么时候将提交并入&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;时，你应该为提交打上方便引用的标签：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git tag -a 0.1 -m &quot;Initial public release&quot; master
git push --tags
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git提供了许多钩子，即仓库中特定事件发生时被执行的脚本。当你向中央仓库推送&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支或者标签时，你可以配置一个钩子来自动化构建公开发布。&lt;/p&gt;

&lt;h3 id=&quot;bug&quot;&gt;终端用户发现了一个bug&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/gitflow-workflow/11.svg&quot; alt=&quot;Maintenance Branch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正式发布之后，Mary回过头来和John一起为下一个发布开发功能。这时，一个终端用户开了一个issue抱怨说当前发布中存在一个bug。为了解决这个bug，Mary（或John）从&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;创建了一个维护分支，用几个提交修复这个issue，然后直接合并回&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout -b issue-#001 master
# Fix the bug
git checkout master
git merge issue-#001
git push
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;和发布分支一样，维护分支包含了&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;中需要的重要更新，因此Mary同样需要执行这个合并。接下来，她可以&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF#git-branch&quot;&gt;删除这个分支&lt;/a&gt;了：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout develop
git merge issue-#001
git push
git branch -d issue-#001
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;接下来该怎么做&lt;/h2&gt;

&lt;p&gt;现在，希望你已经很熟悉&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#%E4%B8%AD%E5%BF%83%E5%8C%96%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;中心化的工作流&lt;/a&gt;、&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#feature%E5%88%86%E6%94%AF%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;功能分支工作流&lt;/a&gt;和Gitflow工作流。你应该已经可以抓住本地仓库、推送/拉取模式，和Git鲁棒的分支和合并模型的无限潜力。&lt;/p&gt;

&lt;p&gt;请记住，教程中呈现的工作流只是可行的实践——而非工作中使用Git的金科玉律。因此，尽情地取其精华，去其糟粕吧。不变的是要让Git为你所用，而不是相反。&lt;/p&gt;

&lt;h2 id=&quot;fork&quot;&gt;Fork工作流&lt;/h2&gt;

&lt;p&gt;Fork工作流和教程中讨论的其它工作流截然不同。与其使用唯一的服务端仓库作为”中央“代码库，它给予 &lt;em&gt;每个&lt;/em&gt; 开发者一个服务端仓库。也就是说每个贡献者都有两个Git仓库，而不是一个：一个私有的本地仓库和一个公开的服务端仓库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/forking-workflow/01.svg&quot; alt=&quot;Git Workflows: Forking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fork工作流的主要优点在于贡献可以轻易地整合进项目，而不需要每个人都推送到单一的中央仓库。开发者推送到他们 &lt;em&gt;自己的&lt;/em&gt; 服务端仓库，只有项目管理者可以推送到官方仓库。这使得管理者可以接受任何开发者的提交，却不需要给他们中央仓库的权限。&lt;/p&gt;

&lt;p&gt;结论是，这种分布式的工作流为大型、组织性强的团队（包括不可信的第三方）提供了安全的协作方式。它同时也是开源项目理想的工作流。&lt;/p&gt;

&lt;h2 id=&quot;section-18&quot;&gt;如何工作&lt;/h2&gt;

&lt;p&gt;和其它Git工作流一样，Fork工作流以一个储存在服务端的官方公开项目开场。但新的开发者想参与项目时，他们不直接克隆官方项目。&lt;/p&gt;

&lt;p&gt;取而代之地，他们fork一份官方项目，在服务端创建一份副本。这份新建的副本作为他们私有的公开仓库——没有其他开发者可以在上面推送，但他们可以从上面拉取修改（在后面我们会讨论为什么这一点很重要）。在他们创建了服务端副本之后，开发者执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;操作，在他们的本地机器上复制一份。这是他们私有的开发环境，正如其他工作流中一样。&lt;/p&gt;

&lt;p&gt;当他们准备好发布本地提交时，他们将提交推送到自己的公开仓库——而非官方仓库。然后，他们向主仓库发起一个pull request，让项目维护者知道一个更新做好了合并的准备。如果贡献的代码有什么问题的话，Pull request可以作为一个方便的讨论版。&lt;/p&gt;

&lt;p&gt;我为了将功能并入官方代码库，维护者将贡献者的修改拉取到他们的本地仓库，确保修改不会破坏项目，将它&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF#git-merge&quot;&gt;合并到本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支&lt;/a&gt;，然后将&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.2-%E4%BF%9D%E6%8C%81%E5%90%8C%E6%AD%A5#git-push&quot;&gt;推送&lt;/a&gt;到服务端的官方仓库。贡献现在已是项目的一部分，其他开发者应该从官方仓库拉取并同步他们的本地仓库。&lt;/p&gt;

&lt;h3 id=&quot;section-19&quot;&gt;中央仓库&lt;/h3&gt;

&lt;p&gt;“官方”仓库这个概念在Fork工作流中只是一个约定，理解这一点很重要。从技术的角度，Git并看不出每个开发者和官方的公开仓库有什么区别。事实上，官方仓库唯一官方的原因是，它是项目维护者的仓库。&lt;/p&gt;

&lt;h3 id=&quot;fork-1&quot;&gt;Fork工作流中的分支&lt;/h3&gt;

&lt;p&gt;所有这些个人的公开仓库只是一个在开发者之间共享分支的约定。每个人仍然可以使用分支来隔离功能，就像在&lt;a href=&quot;](https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#feature%E5%88%86%E6%94%AF%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81)&quot;&gt;功能分支工作流&lt;/a&gt;和&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.5-%E5%B8%B8%E8%A7%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%AF%94%E8%BE%83#gitflow%E5%B7%A5%E4%BD%9C%E6%B5%81&quot;&gt;Gitflow工作流中&lt;/a&gt;一样。唯一的区别在于这些分支是如何开始的。在Fork工作流中，它们从另一个开发者的本地仓库拉取而来，而在功能分支和Gitflow分支它们被推送到官方仓库。&lt;/p&gt;

&lt;h2 id=&quot;section-20&quot;&gt;栗子&lt;/h2&gt;

&lt;h3 id=&quot;section-21&quot;&gt;项目维护者初始化了中央仓库&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/forking-workflow/02.svg&quot; alt=&quot;Forking Workflow: Shared Repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和任何基于Git的项目一样，第一步是在服务端创建一个可以被所有项目成员访问到的官方仓库。一般来说，这个仓库同时还是项目维护者的公开仓库。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/2.2-%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93#git-init&quot;&gt;公开的仓库应该永远是裸的&lt;/a&gt;，不管它们是否代表官方代码库。所以项目维护者应该运行下面这样的命令来设置官方仓库：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
ssh user@host
git init --bare /path/to/repo.git
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Github同时提供了一个图形化界面来替代上面的操作。这和教程中其它工作流设置中央仓库的流程完全一致。如果有必要的话，项目维护者应该将已有的代码库推送到这个仓库中。&lt;/p&gt;

&lt;h3 id=&quot;fork-2&quot;&gt;开发者fork仓库&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/forking-workflow/03.svg&quot; alt=&quot;Forking Workflow: Forking the official repository.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来，所有开发者需要fork官方仓库。你可以用SSH到服务器，运行&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;将它复制到服务器的另一个地址——fork其实只是服务端的clone。但同样地，Github上开发者只需点一点按钮就可以fork仓库。&lt;/p&gt;

&lt;p&gt;在这步之后，每个开发者应该都有了自己的服务端仓库。像官方仓库一样，所有这些仓库都应该是裸仓库。&lt;/p&gt;

&lt;h3 id=&quot;fork-3&quot;&gt;开发者将fork的仓库克隆到本地&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/forking-workflow/04.svg&quot; alt=&quot;Forking Workflow: Cloning the forked repositories&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来开发者需要克隆他们自己的公开仓库。他们可以用熟悉的&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;命令来完成这一步。&lt;/p&gt;

&lt;p&gt;我们的栗子假设使用他们使用Github来托管仓库。记住，在这种情况下，每个开发者应该有他们自己的Github账号，应该用下面的命令克隆服务端仓库：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git clone https://user@github.com/user/repo.git
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;而教程中的其他工作流使用单一的&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;远程连接，指向中央仓库，Fork工作流需要两个远程连接，一个是中央仓库，另一个是开发者个人的服务端仓库。你可以给这些远端取任何名字，约定的做法是将&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;作为你fork后的仓库的远端（运行&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;是会自动创建）和&lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;作为官方项目。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git remote add upstream https://github.com/maintainer/repo
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;你需要使用上面的命令来创建上游仓库的远程连接。它使得你轻易地保持本地仓库和官方仓库的进展同步。注意如果你的上游仓库开启了认证（比如它没有开源），你需要提供一个用户名，就像这样：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git remote add upstream https://user@bitbucket.org/maintainer/repo.git
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;它需要用户从官方代码库克隆或拉取之前提供有效的密码。&lt;/p&gt;

&lt;h3 id=&quot;section-22&quot;&gt;开发者进行自己的开发&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/forking-workflow/05.svg&quot; alt=&quot;Forking Workflow: Developers work on features&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在他们刚克隆的本地仓库中，开发者可以编辑代码、&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/2.3-%E4%BF%9D%E5%AD%98%E4%BD%A0%E7%9A%84%E6%9B%B4%E6%94%B9#git-commit&quot;&gt;提交更改&lt;/a&gt;，和其它分支中一样&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF#git-branch&quot;&gt;创建分支&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git checkout -b some-feature
# 编辑代码
git commit -a -m &quot;Add first draft of some feature&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;他们所有的更改在推送到公开仓库之前都是完全私有的。而且，如果官方项目已经向前进展了，他们可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;获取新的提交：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git pull upstream master
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为开发者应该在专门的功能分支开发，这一般会&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/3.4-%E4%BD%BF%E7%94%A8%E5%88%86%E6%94%AF#git-merge&quot;&gt;产生一个快速向前的合并&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-23&quot;&gt;开发者发布他们的功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/forking-workflow/06.svg&quot; alt=&quot;Forking Workflow: Developers publish features&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一旦开发者准备好共享他们的新功能，他们需要做两件事情。第一，他们必须将贡献的代码推送到自己的公开仓库，让其他开发者能够访问到。他们的&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;远端应该已经设置好了，所以他们只需要：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push origin feature-branch
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这和其他工作流不同之处在于，&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;远端指向开发者个人的服务端仓库，而不是主代码库。&lt;/p&gt;

&lt;p&gt;第二，他们需要通知项目维护者，他们想要将功能并入官方代码库。Github提供了一个“New Pull Request”按钮，跳转到一个网页，让你指明想要并入主仓库的分支。一般来说，你希望将功能分支并入上游远端的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支。&lt;/p&gt;

&lt;h3 id=&quot;section-24&quot;&gt;项目维护者整合他们的功能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/forking-workflow/07.svg&quot; alt=&quot;Forking Workflow: Integrate Features&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当项目维护者收到pull request时，他们的工作是决定是否将它并入官方的代码库。他们可以使用下面两种方式之一：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;直接检查pull request中检查代码&lt;/li&gt;
  &lt;li&gt;将代码拉取到本地仓库然后手动合并&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第一个选项更简单，让维护者查看修改前后的差异，在上面评论，然后通过图形界面执行合并。然而，如果pull request会导致合并冲突，第二个选项就有了必要。在这个情况中，维护者需要从开发者的服务端仓库fetch功能分支，合并到他们本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支，然后解决冲突：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git fetch https://bitbucket.org/user/repo feature-branch
# 检查修改
git checkout master
git merge FETCH_HEAD
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一旦修改被整合进本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;，维护者需要将它推送到服务器上的官方仓库，这样其他开发者也可以访问它：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git push origin master
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;记住，维护者的&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;指向他们的公开仓库，也就是项目的官方代码库。开发者的贡献现在完全并入了项目。&lt;/p&gt;

&lt;h3 id=&quot;section-25&quot;&gt;开发者和中央仓库保持同步&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/forking-workflow/08.svg&quot; alt=&quot;Forking Workflow: Synchronize with the official repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为主代码库已经取得了新的进展，其他开发者应该和官方仓库同步：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
git pull upstream master
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-26&quot;&gt;接下来该怎么做&lt;/h2&gt;

&lt;p&gt;如果你从SVN迁移而来，Fork工作流看上去是一个比较大的转变。但不要害怕——它只是在Feature分支工作流之上引入了一层抽象。贡献的代码发布到开发者在服务端自己的仓库，而不是在唯一的中央仓库中直接共享分支。&lt;/p&gt;

&lt;p&gt;这篇文章解释了一次代码贡献是如何从一个开发者流入官方的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支的，但相同的方法可以用在将代码贡献整合进任何仓库。比如，如果你团队的一部分成员在一个特定功能上协作，他们可以用自己约定的行为共享修改——而不改变主仓库。&lt;/p&gt;

&lt;p&gt;这使得Fork工作流对于松散的团队来说是个非常强大的工具。任何开发者都可以轻而易举地和其他开发者共享修改，任何分支都能高效地并入主代码库。&lt;/p&gt;</content><category term="lab" /><category term="git" /><summary>BY 童仲毅(geeeeeeeeek@github)

  这是一篇在原文(BY atlassian)基础上演绎的译文。除非另行注明，页面上所有内容采用知识共享-署名(CC BY 2.5 AU)协议共享。


多种多样的工作流使得在项目中实施Git时变得难以选择。这份教程提供了一个出发点，调查企业团队最常见的Git工作流。

阅读的时候，请记住工作流应该是一种规范而不是金科玉律。我们希望向你展示所有工作流，让你融会贯通，因地制宜。

这份教程讨论了下面四种工作流：


  中心化的工作流
  基于功能分支的工作流
  Gitflow工作流
  Fork工作流</summary></entry><entry><title>斗战胜佛</title><link href="/blog/2016/02/03/happy-new-year/" rel="alternate" type="text/html" title="斗战胜佛" /><published>2016-02-03T00:00:00+08:00</published><updated>2016-02-03T00:00:00+08:00</updated><id>/blog/2016/02/03/happy-new-year</id><content type="html" xml:base="/blog/2016/02/03/happy-new-year/">&lt;p&gt;2016年，来年再战，《斗战胜佛》献上。&lt;/p&gt;

&lt;embed src=&quot;http://player.youku.com/player.php/sid/XMTQ1ODQ3Njk2NA==/v.swf&quot; allowfullscreen=&quot;true&quot; quality=&quot;high&quot; width=&quot;480&quot; height=&quot;400&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot; type=&quot;application/x-shockwave-flash&quot; /&gt;

&lt;!-- more --&gt;</content><category term="life" /><category term="life" /><category term="video" /><summary>2016年，来年再战，《斗战胜佛》献上。</summary></entry><entry><title>Github上那些炙手可热的技术手册</title><link href="/blog/2016/02/03/github-handbooks/" rel="alternate" type="text/html" title="Github上那些炙手可热的技术手册" /><published>2016-02-03T00:00:00+08:00</published><updated>2016-02-03T00:00:00+08:00</updated><id>/blog/2016/02/03/github-handbooks</id><content type="html" xml:base="/blog/2016/02/03/github-handbooks/">&lt;p&gt;Github上有一些手册类型的开源项目，具有很高的务实价值，因此，本文将保持小碎步更新，请叫我收集狂。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;等等，有敬业福吗？&lt;img class=&quot;emoji&quot; title=&quot;:smile:&quot; alt=&quot;:smile:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f604.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;description&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;repo&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CSS参考手册&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;国内最好的CSS参考手册，持续小步更新&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/doyoe/css-handbook&quot;&gt;&lt;img class=&quot;emoji&quot; title=&quot;:link:&quot; alt=&quot;:link:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f517.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;bash-handbook&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;This document was written for those who want to learn Bash without diving in too deeply.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/denysdovhan/bash-handbook&quot;&gt;&lt;img class=&quot;emoji&quot; title=&quot;:link:&quot; alt=&quot;:link:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f517.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;stream-handbook&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;This document covers the basics of how to write node.js programs with streams.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/substack/stream-handbook&quot;&gt;&lt;img class=&quot;emoji&quot; title=&quot;:link:&quot; alt=&quot;:link:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f517.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;babel-handbook&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;A guided handbook on how to use Babel and how to create plugins for Babel.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/thejameskyle/babel-handbook&quot;&gt;&lt;img class=&quot;emoji&quot; title=&quot;:link:&quot; alt=&quot;:link:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f517.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;browserify-handbook&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;This document covers how to use browserify to build modular applications.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/substack/browserify-handbook&quot;&gt;&lt;img class=&quot;emoji&quot; title=&quot;:link:&quot; alt=&quot;:link:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f517.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><category term="lab" /><category term="github" /><summary>Github上有一些手册类型的开源项目，具有很高的务实价值，因此，本文将保持小碎步更新，请叫我收集狂。</summary></entry><entry><title>Github Pages服务启用Jekyll 3.0，享受纯净Markdown写作体验</title><link href="/blog/2016/02/02/github-jekyll-update/" rel="alternate" type="text/html" title="Github Pages服务启用Jekyll 3.0，享受纯净Markdown写作体验" /><published>2016-02-02T00:00:00+08:00</published><updated>2016-02-02T00:00:00+08:00</updated><id>/blog/2016/02/02/github-jekyll-update</id><content type="html" xml:base="/blog/2016/02/02/github-jekyll-update/">&lt;p&gt;Github Pages(以下简称GP)服务从今天起正式启用Jekyll 3.0版本，各位博主需要特别注意以下两点&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2016.5.1起，GP将只支持Kramdown Markdown 引擎，这就意味着你站点的_config.yml中可以移除相关设置了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GP现在只支持Rouge型的代码高亮，因此，你可以直接在文章中使用你最熟悉的三个波浪线或重音线来标记高亮代码区间，可以大胆抛弃老的高亮语法规则了&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;github&quot;&gt;Github新代码高亮语法测试&lt;/h3&gt;

&lt;p&gt;```javascript
‘use strict’;&lt;/p&gt;

&lt;p&gt;var gulp = require(‘gulp’);
var uglifycss = require(‘gulp-uglifycss’);&lt;/p&gt;

&lt;p&gt;gulp.task(‘css’, function () {
  gulp.src(‘./assets/css/*.css’)
    .pipe(uglifycss())
    .pipe(gulp.dest(‘./assets/dist/’));
});&lt;/p&gt;

&lt;p&gt;gulp.task(‘debug’, function() {
  gulp.src(‘./assets/css/*.css’)
    // .pipe(uglifycss())
    .pipe(gulp.dest(‘./assets/dist/’));
})&lt;/p&gt;

&lt;p&gt;gulp.task(‘build’, [‘css’])
gulp.task(‘default’, [‘debug’]);
```&lt;/p&gt;

&lt;p&gt;可以查看Github上的md源文件验证上述规则。&lt;/p&gt;</content><category term="lab" /><category term="github" /><category term="jekyll" /><summary>Github Pages(以下简称GP)服务从今天起正式启用Jekyll 3.0版本，各位博主需要特别注意以下两点</summary></entry><entry><title>Flask中让api实现客户端授权</title><link href="/blog/2015/10/21/flask-auth/" rel="alternate" type="text/html" title="Flask中让api实现客户端授权" /><published>2015-10-21T00:00:00+08:00</published><updated>2015-10-21T00:00:00+08:00</updated><id>/blog/2015/10/21/flask-auth</id><content type="html" xml:base="/blog/2015/10/21/flask-auth/">&lt;blockquote&gt;
  &lt;p&gt;后端API通常需要对发送请求的客户端进行合法验证，以确保这些API是被”保护”起来的。
前段时间给一个移动应用做Flask的Restful-API正好涉及到了这方面的内容，其中有用到python元编程的相关技巧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;如何认证？&lt;/h3&gt;

&lt;p&gt;对于崇尚标准的工程师来说，http标准的auth是一个不错的选择，或者直接选择oAuth也可以。
但本着研究的精神，我们自己来实现一个api签名机制，并且patch到需要认证的api对应的资源类上。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;认证思路&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们需要知道的大概认证背景和思路：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;合法客户端拥有服务端下发的app_id和app_key;&lt;/li&gt;
  &lt;li&gt;服务端知道每个app_id对应的app_key;&lt;/li&gt;
  &lt;li&gt;客户端请求接口数据时，必须用本地的app_key，时间戳，以及app_id进行指定规则的加密，得到一个签名串;&lt;/li&gt;
  &lt;li&gt;每一次请求带上app_id，时间戳，签名串和业务数据提交给后端API;&lt;/li&gt;
  &lt;li&gt;后端API根据提交上来app_id，时间戳，签名串就可以确认是否为合法的客户端;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;废话不多说，上代码和详细的注释：&lt;/p&gt;

&lt;h3 id=&quot;keygenpy&quot;&gt;我们先伪造一个颁证服务key_gen.py&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sign_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    签名算法测试
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_key&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ge_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    :return: app_id
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ge_app_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    :return: app_key
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ge_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ge_app_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sign_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;159874265148&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;710628459&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;bd7d14ed5e0b9bf3c3ac28c224b322d271f6ae6c&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;flaskauthpy&quot;&gt;Flask中利用元类进行授权包装auth.py&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FunctionType&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask.views&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodViewType&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask_restful&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app.setting&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACCESS_CLIENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENV_DEBUG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_sign_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    :param args: 认证参数
    :return: 是否签名成功
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRE_TIMESTAMP&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 为了正确传递KeyError错误&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_time_stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;timestamp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_app_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;app_id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;signature&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_time_stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRE_TIMESTAMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PRE_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_time_stamp&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_time_stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ACCESS_CLIENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_app_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_get_resource_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    :return: 获取资源Restful基类
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENV_DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_meta_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequireAuthClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with_meta_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    :param meta: 指定元类
    :param bases: 指定基类
    :return: 继承自按照指定元类创建的基类的临时类
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetaClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__call__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__call__&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_bases&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MetaClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;temporary_class&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;api_require_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    :param http_handler: 业务接口处理方法
    :return: 包装了认证逻辑的包装方法
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_sign_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;access fail&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&#39;access need a {} param&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequireAuthClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodViewType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    接口授权统一处理类
    基本思想是：所有指定RequireAuthClass为元类的类，在type.__new__为其实例化时
    会自动将其下的post,put,delete等方法包装上api_require_auth
    为了解决元类冲突问题，RequireAuthClass必须是MethodViewType的子类
    而不是type的子类
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteritems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;post&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;put&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;delete&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;get&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# restful methods&lt;/span&gt;
                &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FunctionType&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api_require_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodViewType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;api&quot;&gt;业务层的api就好办多了&lt;/h3&gt;

&lt;p&gt;小Tip：&lt;/p&gt;

&lt;p&gt;app.auth模块导出的_get_resource_base方法由环境变量控制&lt;/p&gt;

&lt;p&gt;如果在调试模式下，则不启用授权&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Flask 引入&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonify&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask_restful&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reqparse&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;werkzeug.local&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalProxy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app.auth&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_get_resource_base&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 配置&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app.setting&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CURRENT_API_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SET_VERSION_ROUTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_db_settings&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;util.mongo_util&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mongo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_serializable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 获取db实例&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;_database&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mongo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_db_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 全局db实例&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalProxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 应用环境销毁的时候&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@app.teardown_appcontext&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;teardown_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 意外退出日志&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;_database&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 确保db立即关闭&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@app.errorhandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;not_found_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;code&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeToApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_resource_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    业务api根入口
    用于检查版本等用途
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;ZhiYuanHelper Api&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&#39;version&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURRENT_API_VERSION&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_resource_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    用户管理类
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&#39;user_id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;测试账号&#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_resource_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    用户注册接口
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_resource_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    用户登录接口
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# todo 等待前段定义所需数据&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HigherVocationalCollege&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_get_resource_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reqparse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reqparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&#39;&#39;&#39;
        Defaults to :class:`unicode`
        in python2 and :class:`str` in python3.
        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reqparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;province&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reqparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;description&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reqparse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@close_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;db&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_serializable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&#39;args&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# API 列表&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WelcomeToApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/api&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SET_VERSION_ROUTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/user/&amp;lt;int:user_id&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HigherVocationalCollege&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SET_VERSION_ROUTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/hvc&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;欢迎拍砖~&lt;/p&gt;</content><category term="work" /><category term="flask" /><category term="python" /><summary>后端API通常需要对发送请求的客户端进行合法验证，以确保这些API是被”保护”起来的。
前段时间给一个移动应用做Flask的Restful-API正好涉及到了这方面的内容，其中有用到python元编程的相关技巧。


如何认证？

对于崇尚标准的工程师来说，http标准的auth是一个不错的选择，或者直接选择oAuth也可以。
但本着研究的精神，我们自己来实现一个api签名机制，并且patch到需要认证的api对应的资源类上。</summary></entry><entry><title>AOP实现一个vue中带验证的$http模块</title><link href="/blog/2015/10/17/aop-vue/" rel="alternate" type="text/html" title="AOP实现一个vue中带验证的$http模块" /><published>2015-10-17T00:00:00+08:00</published><updated>2015-10-17T00:00:00+08:00</updated><id>/blog/2015/10/17/aop-vue</id><content type="html" xml:base="/blog/2015/10/17/aop-vue/">&lt;blockquote&gt;
  &lt;p&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;事实上在js中，我们不止一次地会用到AOP，这不，我们又遇到了：&lt;/p&gt;

&lt;p&gt;现在有一个需求是这样的：在我们的某个SPA项目中需要模拟Native侧的登录效果以增强用户体验，
大概思路是，不管哪个View拉取了哪个接口的数据，只要接口返回403，那么就要”快速”跳转到登录页。
开发人员在调用$http方法拉取数据时不需要关心这个逻辑，全程由拦截逻辑透明代理。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;思路分析&lt;/h3&gt;

&lt;p&gt;经过分析可以得出：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;所有涉及拉取数据的视图必先要经过一次主动的fetchData调用，因此，我们需要拦截调用侧的逻辑，
并且最好能够保证这个拦截逻辑对于调用侧来讲是透明的；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为了增强用户体验，我们需要在视图还没进入渲染之前就完成这个跳转，因此，这个跳转逻辑不能推迟。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section-1&quot;&gt;实现&lt;/h3&gt;

&lt;p&gt;我们项目落地的选型是：vue+es6，想要达到的目的是让开发不关心拦截逻辑，
像这样：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../components/header.vue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hotsale&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../components/hotsale.vue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;banner&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;../components/banner.vue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 路由勾子&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 增强体验的推荐做法&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 因为AOP实现的$httpWithAuth方法有性能损耗&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 有一些职责清晰的业务可能还是需要直接调用$http&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 所以，通过将$httpWithAuth这个全新方法挂载到上下文来解决&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&#39;testData&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$httpWithAuth&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;http://api.test.com/test&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;s1&quot;&gt;&#39;testData&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&#39;testData&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 注册组件实例&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;hotsale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;banner&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;$httpWithAuth的实现&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./util&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// $httpWithAuth&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 代理Vue.$http&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Vue.$resource是$http的上层&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;$httpWithAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_handleWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 代理$http模块&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_handleWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 验证方法&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 返回promise&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 这里需要返回Promise给组件实例的route选项用&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 重定向到某个业务path&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 一般为/login登陆业务&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/login&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 模块原方法&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_oF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;originModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// 绑定验证&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_oF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;originModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;通过Vue.use勾子我们将$httpWithAuth挂载到上下文供业务侧使用，这样可以保证在各个地方都可以按需调用这个模块&lt;/li&gt;
  &lt;li&gt;通过简单的AOP，我们就把$http模块的方法进行了验证代理，这样就基本完成了我们的需求。&lt;/li&gt;
&lt;/ol&gt;</content><category term="work" /><category term="vue" /><category term="fe" /><category term="javascript" /><summary>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。


事实上在js中，我们不止一次地会用到AOP，这不，我们又遇到了：

现在有一个需求是这样的：在我们的某个SPA项目中需要模拟Native侧的登录效果以增强用户体验，
大概思路是，不管哪个View拉取了哪个接口的数据，只要接口返回403，那么就要”快速”跳转到登录页。
开发人员在调用$http方法拉取数据时不需要关心这个逻辑，全程由拦截逻辑透明代理。

思路分析

经过分析可以得出：


  
    所有涉及拉取数据的视图必先要经过一次主动的fetchData调用，因此，我们需要拦截调用侧的逻辑，
并且最好能够保证这个拦截逻辑对于调用侧来讲是透明的；
  
  
    为了增强用户体验，我们需要在视图还没进入渲染之前就完成这个跳转，因此，这个跳转逻辑不能推迟。</summary></entry></feed>
